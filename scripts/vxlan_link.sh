#!/bin/bash

PARAMS=""
CMD=""
BRIDGE=""
VXLAN=""
PORT=""
REMOTE_IP=""

#Internal variables
portnum=""
ipInt=0

#Executables used here
OVSCMD=`which ovs-vsctl`
OFCMD=`which ovs-ofctl`

print_inputs() {
  echo "cmd=$CMD" >&2
  echo "bridge=$BRIDGE" >&2
  echo "remote_ip=$REMOTE_IP" >&2
  echo "vxlan=$VXLAN" >&2
  echo "port=$PORT" >&2
  echo "params=$PARAMS" >&2
}

print_help() {
  echo " " >&2
  echo "Usage: $0 supports two commands - add and remove" >&2
  echo " $0 add -b|--bridge BRIDGE -i|--remote_ip IP -x|--vxlan NUM -p|--port PORT" >&2
  echo " The port is optional, if it is not provided, a portname will be autogenerated" >&2
  echo "---" >&2
  echo " $0 remove -b|--bridge BRIDGE -i|--remote_ip IP -p|--port PORT" >&2
  echo " Either the IP or the PORT parameter needs to be provided" >&2
  echo " " >&2 
}

# function to test a valid IP address
function valid_ip() {
  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
      && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
    portnum="${ip[2]}${ip[3]}"
    ipInt=$(( ${ip[3]} + ${ip[2]} * 256 + ${ip[1]} * 256 * 256 + ${ip[0]} * 256 * 256 *256 ))
    echo "Int value of IP provided: $ipInt" >&2
  fi
  return $stat
}

# First parse the sub command
if [ -n $1 ]; then
  case "$1" in
    add|remove)
      CMD=$1
      shift
      ;;
    help)
      print_help
      exit 0
      ;;
    *)
      echo "Incorrect command invocation - specify add or remove" >&2
      print_help
      exit 1
      ;;
  esac
fi


# Parse all arguments and parameters
while (( "$#" )) ; do
  case "$1" in
    -b|--bridge)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        BRIDGE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        print_help
        exit 1
      fi
      ;;
    -i|--remote_ip)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        REMOTE_IP=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        print_help
        exit 1
      fi
      ;;
    -x|--vxlan)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        VXLAN=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        print_help
        exit 1
      fi
      ;;
    -p|--port)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        PORT=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        print_help
        exit 1
      fi
      ;;
    -*|--*) # unsupported parameter
      echo "Error: Unsupported parameter $1" >&2
      exit 1
      ;;
    *)
      PARAMS="$PARAMS $1"
      shift
      print_help
      ;;
  esac
done

# Uncomment for debugging
#print_inputs

# Input validation

# Bridge name always needed
# Check that the value provided is a real bridge
if [ -n "$BRIDGE" ] && [ `$OVSCMD show | grep -c $BRIDGE` -gt 0 ]; then
  echo "Bridge provided: $BRIDGE" >&2
else
  echo "Error: Bridge name not provided" >&2
  print_help
  exit 1
fi

# inputs for add and remove
case "$CMD" in
  add) # for add, verify ip and vxlan are provided
    valid_ip $REMOTE_IP
    if [[ $? -eq 0 ]] && [[ "$VXLAN" -gt 0 ]]; then
      #echo "Port Number created: $portnum" >&2
      echo "IP and VXLAN provided: $REMOTE_IP $VXLAN" >&2
    else
      echo "Error: Both IP and VXLAN need to be provided" >&2
      print_help
      exit 1
    fi
    
    # Check if port name specified, if not build one
    if ! [ -n "$PORT" ]; then
      PORT="vxlan$portnum"
      echo "Port Name created: $PORT" >&2
    fi

    # Create the vxlan link and store command exit status
    $OVSCMD add-port $BRIDGE $PORT -- set interface $PORT type=vxlan options:remote_ip=$REMOTE_IP options:key=$VXLAN
    status=$?
    $OFCMD add-flow $BRIDGE "table=0, priority=10, in_port=$PORT,udp,tp_src=67, actions=drop"
    $OFCMD add-flow $BRIDGE "table=0, priority=10, in_port=$PORT,udp,tp_src=68, actions=drop"

    ;;
  remove) # for remove, verify either port or ip are provided
    # if port provided, check that it exists and attempt to remove the port
    if [ -n "$PORT" ] && [ `$OVSCMD list-ports $BRIDGE | grep -c $PORT` -gt 0 ]; then
      $OVSCMD del-port $BRIDGE $PORT
      status=$?
    # if IP provided, derive the port and check that it exists
    elif [ -n "$REMOTE_IP" ] && valid_ip $REMOTE_IP; then
      PORT="vxlan$portnum"
      if [ `$OVSCMD list-ports $BRIDGE | grep -c $PORT` -gt 0 ]; then
        echo "Removing vxlan to IP: $REMOTE_IP" >&2
        $OFCMD del-flows $BRIDGE "table=0, in_port=$PORT,udp,tp_src=67"
        $OFCMD del-flows $BRIDGE "table=0, in_port=$PORT,udp,tp_src=68"
        $OVSCMD del-port $BRIDGE $PORT
        status=$?
      else
        echo "No vxlan link to IP: $REMOTE_IP" >&2
        exit 1
      fi
    else
      echo "Error: Either PORT or valid IP needs to be provided" >&2
      print_help
      exit 1
    fi
    ;;
esac

exit $status

